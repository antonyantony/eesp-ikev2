# -*- fill-column: 69; -*-
# vim: set textwidth=69
# Do: title, toc:table-of-contents ::fixed-width-sections |tables
# Do: ^:sup/sub with curly -:special-strings *:emphasis
# Don't: prop:no-prop-drawers \n:preserve-linebreaks ':use-smart-quotes
#+OPTIONS: prop:nil title:t toc:t \n:nil ::t |:t ^:{} -:t *:t ':nil

#+RFC_CATEGORY: info
#+RFC_NAME: draft-antony-eesp-ikev2-notes
#+RFC_VERSION: 00
#+RFC_IPR: trust200902
#+RFC_STREAM: IETF
#+RFC_XML_VERSION: 3
#+RFC_CONSENSUS: true

#+TITLE: Notes on IKEv2 Key Derivation Function
#+RFC_SHORT_TITLE: KEv2 KDF Notes
#+AUTHOR: Steffen Klassert
#+EMAIL: steffen.klassert@secunet.com
#+AFFILIATION: secunet Security Networks AG
#+RFC_SHORT_ORG: secunet
#+RFC_ADD_AUTHOR: ("Antony Antony" "antony.antony@secunet.com" ("secunet" "secunet Security Networks AG"))
#+RFC_AREA: SEC
#+RFC_WORKGROUP: IPSECME Working Group

* Introduction

These are notes on EESP IKEv2 and other EESP related information. To keep it in one place for quick access.

* KDF methods

Using the SKEYSEED further keys are derived using iterative call to prf, which is
denoted as prf+.

IKEv2 key derivation, [[RFC7296]], is likely ~KDF in Feedback Mode~
specified in [[NIST800-108]] and RFC[[5869]]. This in iterative
method as I see it in Section 2.13 [[RFC7296]]

In the following, | indicates concatenation.  prf+ is defined as:
prf+ (K,S) = T1 | T2 | T3 | T4 | ...

where:
   T1 = prf (K, S | 0x01)

   T2 = prf (K, T1 | S | 0x02)

   T3 = prf (K, T2 | S | 0x03)

   T4 = prf (K, T3 | S | 0x04)

   ...

Section 2.14 of [[RFC7296]] which defined HMAC  expansion of SKEYSEED

SKEYSEED = prf(Ni | Nr, g^ir)

IKEv2 key derivation has two setps. Above is the first step and next
key expansion using prf+.

{SK_d | SK_ai | SK_ar | SK_ei | SK_er | SK_pi | SK_pr}
                   = prf+ (SKEYSEED, Ni | Nr | SPIi | SPIr)

(indicating that the quantities SK_d, SK_ai, SK_ar, SK_ei, SK_er,
SK_pi, and SK_pr are taken in order from the generated bits of the
prf+).  g^ir is the shared secret from the ephemeral Diffie-Hellman
exchange.  g^ir is represented as a string of octets in big endian
order padded with zeros if necessary to make it the length of the
modulus.  Ni and Nr are the nonces, stripped of any headers.

KEYMAT = prf+(SK_d, Ni | Nr)

Where Ni and Nr are the nonces from the IKE_SA_INIT exchange if this
request is the first Child SA created or the fresh Ni and Nr from the
CREATE_CHILD_SA exchange if this is a subsequent creation.

For CREATE_CHILD_SA exchanges including an optional Diffie-Hellman
exchange, the keying material is defined as:

KEYMAT = prf+(SK_d, g^ir (new) | Ni | Nr)

where g^ir (new) is the shared secret from the ephemeral Diffie-
Hellman exchange of this CREATE_CHILD_SA exchange (represented as an
octet string in big endian order padded with zeros in the high-order
bits if necessary to make it the length of the modulus).

What EESP IKEv2 proposing as ~Heirarchial key derivation~
NIST800-108 defines ~Key Hierarchy~

In Section 5.4 of Key Management for Multicast [[RFC2627]] a
Logical Key Hierarchy (LKH). I din't follow that completly.
It is refered in G-IKEv2.

** Hardware friendly prf
Current IKEv2 IANA registry,[[IKEv2-prf]], specifies very few
hardware friendly Pseudorandom Function Transforms. And IETF
recmendations [[RFC8247]] has only PRF_AES128_XCBC.

Hardware friendly prf and prf+ are limited to maximum strength of
128 bits! While the SHA2 does not have this limit. This comes
from the limit of input and output block of AES underlying
structure. Input is 128 bit and output are 128bits,
even when using a 256 bit key. Hence the overall strength
when using AES as prf would reduce to 128bit.

In practice many cloud providers appears to be using more
hardware friendly PRF, such as AES-CMAC-128 by [[PSP]]
and very likely AES-CTR by Amazon AWS. Any public citations of AWS
PRF? I deduced AES-CTR from their comment to [[NIST-800-108-comments]].

Section 2.14 of [[RFC7296]] "If the negotiated PRF is
AES-XCBC-PRF-128 [[RFC4434]] or AES-CMAC-PRF-128 [[RFC4615]],
only the first 64 bits of Ni and the first 64 bits of Nr are used in
calculating SKEYSEED, but all the bits are used for input to the prf+
function." And AES-GCM 256 is not yet an IKEv2 prf.

TLS 1.3, Appendix B of [[RFC8446]] lst HASH. It need a minimum 256
bit output, currently supports SHA256 and SHA384, a.k.a. HASH, HKDF.
e.g. TLS_AES_128_GCM_SHA256 TLS_AES_256_GCM_SHA384.

** KDF  References

TLS 1.3[[RFC8446]] use hkdf and their reference
Krawczyk, H., "Cryptographic Extraction and Key Derivation: The HKDF
Scheme", Proceedings of CRYPTO 2010, August 2010,
<https://eprint.iacr.org/2010/264>.

Another possibly related reference, work in cfrg, but for hardware
wallets, I.D-dijkhuis-cfrg-hdkeys

* UDP Encap

Why UDP?
- For Roadwarrior: IPv4 home gateway.
- Why Datacenters, without NAT, using UDP? [Tero] This is a failure for a new protocol.
- In the Cloud per flow limitation, without NAT
- Wide spread RSS Support for UDP when using RFC9611

** Use cases for UDP Encapsulation  without NAT
*** UDP Encapsulation in Cloud Provider

A common question is why use UDP when there is no NAT, especially in
cloud environments or why vary UDP source ports for inner flows.

Cloud providers often enforce bandwidth limits per flow between nodes
or to external endpoints. A flow is defined by a 5-tuple: protocol,
local IP, remote IP, local port, and remote port. ESP (and likely
EESP) lacks port numbers, unlike UDP or TCP, so it is identified only
by its local and remote IPs. This causes ESP traffic to be treated as
one flow, leading to strict bandwidth limits.

These limits can severely impact IPsec throughput between peers,
especially when using [[RFC9611]].

A practical solution is to encapsulate ESP in UDP. By varying the UDP
source port based on inner flow characteristics, traffic can be spread
across multiple flows. This bypasses bandwidth restrictions and
improves throughput. Test results supporting this were presented in
[[AWS-IPsec-NetDev]].

For further details, see:
[[Azure-Network]]

[[AWS-Network]]

[[GCP-Network]]


* WESP UDP Encap
[[RFC5840]] WESP has the same issue, because they re-use destination
port 4500. WESP-in-UP add additoonal 32 bits, SPI 0x2, to disinguish
from EESP. It is 32 bits at the top. SPI 0x2 is from the reserved
range SPIs (0-255). I think, the RFC 5840 also advise not to use the
first nibble, 4 bits, numbers 4 and 6 could be used by IPv4 or IPv6.

#+caption: Figure 4: UDP-Encapsulated WESP Header
#+name: wesp-udp-encap
#+begin_src
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |        Src Port (4500)        | Dest Port (4500)              |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |             Length            |          Checksum             |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |          Protocol Identifier (value = 0x00000002)             |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Next Header  |   HdrLen      |  TrailerLen   |    Flags      |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                      Existing ESP Encapsulation               |
  ~                                                               ~
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

#+end_src

EESP could use another spi say 3 as an EESP marker.
However, this 4 bytes would lead to waste of 4 bytes every EESP packet.

* UDP pot sharing on Linux

On linux define EESPINUDP, a type socket encapsulation. It is
similar to ESPINUDP. When set this socket will accept IKE pac

* Normative References

** RFC2627
** RFC3948
** RFC5840
** RFC7296
** RFC8247
** RFC4615
** RFC5869

** NIST800-108
:PROPERTIES:
:REF_TARGET: https://www.nist.gov/publications/recommendation-key-derivation-using-pseudorandom-functions-1
:REF_TITLE: Recommendation for Key Derivation Using Pseudorandom Functions
:REF_ORG: NIST
:END:

* Informative References

** RFC4434
** RFC9611
** RFC8446

** I-D.ietf-ipsecme-g-ikev2

** Azure-Network
:PROPERTIES:
:REF_TITLE: Azure Virtual machine network bandwidth
:REF_TARGET: https://learn.microsoft.com/en-us/azure/virtual-network/virtual-machine-network-throughput
:REF_ORG: Microsoft Azure
:END:

** GCP-Network
:PROPERTIES:
:REF_TITLE: Google Compute Engine Network bandwidth
:REF_TARGET: https://cloud.google.com/compute/docs/network-bandwidth
:REF_ORG: Google
:END:

** AWS-Network
:PROPERTIES:
:REF_TITLE: Google Compute Engine Network bandwidth
:REF_TARGET: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html
:REF_ORG: Amazon AWS
:END:

** AWS-IPsec-NetDev
:PROPERTIES:
:REF_TITLE: NetDev Talk : Multi-core IPsec tunnels
:REF_TARGET: https://learn.microsoft.com/en-us/azure/virtual-network/virtual-machine-network-throughput
:REF_ORG: Amazon AWS
:END:

** PRGS20
:PROPERTIES:
:REF_TITLE: Vector Packet Encapsulation: The Case for a Scalable IPsec Encryption Protocol
:REF_TARGET: https://doi.org/10.1145/3407023.3407060
:REF_ORG: Technische Universit√§t Ilmenau
:END:

** NIST-800-108-comments
:PROPERTIES:
:REF_TARGET: https://csrc.nist.gov/files/pubs/sp/800/108/r1/final/docs/sp800-108r1-draft-comments-resolutions.pdf
:REF_TITLE: Public Comments and Resolutions on Draft NIST SP 800-108 Revision 1, Recommendation for Key DerivationUsingPseudorandomFunctions, 2020
:REF_ORG: NIST
:END:

** IKEv2-prf
:PROPERTIES:
:REF_TARGET: https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-          parameters-6
:REF_TITLE: IKEv2 Parameters: Extended Sequence Numbers Transform IDs
:REF_ORG: IANA
:END:

** PSP
:PROPERTIES:
:REF_TARGET: https://github.com/google/psp/blob/main/doc/PSP_Arch_Spec.pdf
:REF_TITLE: PSP Architecture Specification
:REF_ORG: Google
:END:
